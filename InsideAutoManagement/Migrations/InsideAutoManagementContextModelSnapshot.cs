// <auto-generated />
using System;
using InsideAutoManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsideAutoManagement.Migrations
{
    [DbContext(typeof(InsideAutoManagementContext))]
    partial class InsideAutoManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsideAutoManagement.Model.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CarDealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<int>("GearShiftId")
                        .HasColumnType("int");

                    b.Property<string>("Km")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<double>("StartPrice")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarDealerId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.CarDealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PIVA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarDealers");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CarDealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("NumberValue")
                        .HasColumnType("float");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarDealerId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarDealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("FolderCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarDealerId");

                    b.HasIndex("CarId");

                    b.HasIndex("FolderCategoryId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.FolderCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarDealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarDealerId");

                    b.ToTable("FolderCategories");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.OpeningHoursShift", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("CarDealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CarDealerId");

                    b.ToTable("OpeningHoursShifts");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.Car", b =>
                {
                    b.HasOne("InsideAutoManagement.Model.CarDealer", "CarDealer")
                        .WithMany()
                        .HasForeignKey("CarDealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarDealer");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.Configuration", b =>
                {
                    b.HasOne("InsideAutoManagement.Model.CarDealer", "CarDealer")
                        .WithMany()
                        .HasForeignKey("CarDealerId");

                    b.Navigation("CarDealer");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.Document", b =>
                {
                    b.HasOne("InsideAutoManagement.Model.CarDealer", "CarDealer")
                        .WithMany("Documents")
                        .HasForeignKey("CarDealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsideAutoManagement.Model.Car", null)
                        .WithMany("Documents")
                        .HasForeignKey("CarId");

                    b.HasOne("InsideAutoManagement.Model.FolderCategory", "FolderCategory")
                        .WithMany()
                        .HasForeignKey("FolderCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarDealer");

                    b.Navigation("FolderCategory");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.FolderCategory", b =>
                {
                    b.HasOne("InsideAutoManagement.Model.CarDealer", "CarDealer")
                        .WithMany()
                        .HasForeignKey("CarDealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarDealer");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.OpeningHoursShift", b =>
                {
                    b.HasOne("InsideAutoManagement.Model.CarDealer", null)
                        .WithMany("OpeningHoursShifts")
                        .HasForeignKey("CarDealerId");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.Car", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("InsideAutoManagement.Model.CarDealer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("OpeningHoursShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
